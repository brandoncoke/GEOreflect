){
bool= grepl("log", as.character(colspresent), ignore.case = T) &
grepl("fold", as.character(colspresent), ignore.case = T)
logfc_column= which(bool)[1]
}
}else{
logfc_column= 2
}
#Symbol defaults
if(any(grepl("gene|hgnc|symbol|ident", as.character(colspresent)),
ignore.case = T)
){
gene_column=
grep("gene|hgnc|symbol|ident", as.character(colspresent),
ignore.case = T)[1]
#if it actually has the hngc symbols
if(any(grepl("hgnc|symbol", as.character(colspresent)),
ignore.case = T)){
gene_column=
grep("hgnc|symbol", as.character(colspresent), ignore.case = T)[1]
}
}else{
gene_column= 1
}
pvalue_column=3
if(any(grepl("p-val|pval|p[.]val", as.character(colspresent),
ignore.case = T))){
pvalue_column=
which(grepl("p-val|pval|p[.]val", as.character(colspresent),
ignore.case = T))
pvalue_column= pvalue_column[1]
}
#better if using non adjusted p-values- this switches to it if
#both p-values and adjusted p-values
if(any(grepl("p-val|pval|p[.]val", as.character(colspresent),
ignore.case = T) &
!grepl("adj", as.character(colspresent),
ignore.case = T))){
pvalue_column=
which(grepl("p-val|pval|p[.]val", as.character(colspresent),
ignore.case = T) &
!grepl("adj", as.character(colspresent),
ignore.case = T))
pvalue_column= pvalue_column[1]
}
probe_column= 1
if(any(grepl("ID|_at|probe|affy|hg_u133", as.character(colspresent),
ignore.case = T))){
grep("p-val|adj[_|-]p|pval", as.character(colspresent), ignore.case = T)[1]
}else{
probe_column= 1
}
GEOreflect_reranking_RNA_seq(the_frame= RNA_seq_DEG_frame, #DEG frame
pvalue_indice= pvalue_column, #p-value column indice
gene_indice= gene_column, #Gene column indice
logfc_indice= logfc_column, #logFC column indice
minlogfc= -1, #logfc needs to be lower than this
pvallim= 0.05, #p-value needs to be lower than this
maxlogfc=1,  #logfc needs to be higher than this
unmatched_bool= T) #remove genes not present in percentile frame
#GPL570
GEOreflect_reranking_RNA_seq(the_frame= RNA_seq_DEG_frame, #DEG frame
pvalue_indice= 4, #p-value column indice
gene_indice= 7, #Gene column indice
logfc_indice= 1, #logFC column indice
minlogfc= -1, #logfc needs to be lower than this
pvallim= 0.05, #p-value needs to be lower than this
maxlogfc=1,  #logfc needs to be higher than this
unmatched_bool= T) #
#Get number of relevant DEGs in top 250 studies
################################################################################
master_frame= read.csv("~/csv/master_frame_scatter_plots.csv")
View(master_frame)
#obtain the minimum rank of a gene by accounting for all redundant probes
get_gene_minimum_rank= function(study_title= "GSE17385 B-catenin shRNA",
bool_col= "wnt_assoc"){
export_frame= master_frame[master_frame$study == study_title,]
wnt_genes= unique(export_frame$Gene.symbol[export_frame[,bool_col]])#
GEOlimma_min_ranks= NULL
for(wnt_gene in wnt_genes){
GEOlimma_min_ranks= c(GEOlimma_min_ranks,
min(export_frame[export_frame$Gene.symbol == wnt_gene , "GEOlimma_rank"], na.rm= T)
)
}
GEOreflect_min_ranks= NULL
for(wnt_gene in wnt_genes){
GEOreflect_min_ranks= c(GEOreflect_min_ranks,
min(export_frame[export_frame$Gene.symbol == wnt_gene , "GEOreflect_rank"], na.rm= T)
)
}
limma_min_ranks= NULL
for(wnt_gene in wnt_genes){
limma_min_ranks= c(limma_min_ranks,
min(export_frame[export_frame$Gene.symbol == wnt_gene , "pval_rank"], na.rm= T)
)
}
data.frame(wnt_genes,
GEOlimma_min_ranks,
GEOreflect_min_ranks,
limma_min_ranks,
study= study_title)
}
View(master_frame)
View(master_frame)
################################################################################
#Get number of relevant DEGs in top 250 studies
################################################################################
master_frame= read.csv("~/csv/master_frame_scatter_plots.csv")
require(ggplot2)
#obtain the minimum rank of a gene by accounting for all redundant probes
get_gene_minimum_rank= function(study_title= "GSE17385 B-catenin shRNA",
bool_col= "wnt_assoc"){
export_frame= master_frame[master_frame$study == study_title,]
wnt_genes= unique(export_frame$Gene.symbol[export_frame[,bool_col]])#
GEOlimma_min_ranks= NULL
for(wnt_gene in wnt_genes){
GEOlimma_min_ranks= c(GEOlimma_min_ranks,
min(export_frame[export_frame$Gene.symbol == wnt_gene , "GEOlimma_rank"], na.rm= T)
)
}
GEOreflect_min_ranks= NULL
for(wnt_gene in wnt_genes){
GEOreflect_min_ranks= c(GEOreflect_min_ranks,
min(export_frame[export_frame$Gene.symbol == wnt_gene , "GEOreflect_rank"], na.rm= T)
)
}
limma_min_ranks= NULL
for(wnt_gene in wnt_genes){
limma_min_ranks= c(limma_min_ranks,
min(export_frame[export_frame$Gene.symbol == wnt_gene , "pval_rank"], na.rm= T)
)
}
data.frame(wnt_genes,
GEOlimma_min_ranks,
GEOreflect_min_ranks,
limma_min_ranks,
study= study_title)
}
View(master_frame)
get_gene_minimum_rank("GSE44097 B-catenin siRNA SW480")
a= get_gene_minimum_rank("GSE44097 B-catenin siRNA SW480")
View(a)
################################################################################
#Getting all associated Wnt genes
################################################################################
valid_probes= read.csv("~/csv/valid_probes.csv")
valid_probes= valid_probes[,-1]
wnt_signalling <- read.delim("~/csv/Wnt_signalling.tsv") #manual assignment only from quickGO
wnt_signalling= unique(wnt_signalling$SYMBOL,
wnt_signalling$GENE.PRODUCT.ID)
pos_wnt_signalling <- read.delim("~/csv/Positive_wnt_signalling.tsv") #manual assignment
pos_wnt_signalling= unique(pos_wnt_signalling$SYMBOL,
pos_wnt_signalling$GENE.PRODUCT.ID)
neg_wnt_signalling <- read.delim("~/csv/Negative_wnt_signalling.tsv") #manual assignment]
neg_wnt_signalling= unique(neg_wnt_signalling$SYMBOL,
neg_wnt_signalling$GENE.PRODUCT.ID)
non_canonicial <- read.delim("~/csv/Non-canonical_Wnt.tsv")
non_canonicial= unique(non_canonicial$SYMBOL,
non_canonicial$GENE.PRODUCT.ID)
reactome_wnt_signalling= read.csv("~/csv/reactome_signalling_by_wnt.csv")
reactome_wnt_signalling= reactome_wnt_signalling$Gene.Symbol
wnt_list= read.table("~/csv/wnt-gene-list-275.txt", quote="\"", comment.char="")
wnt_list= wnt_list[,1]
full_list= c(wnt_signalling, reactome_wnt_signalling, non_canonicial,
neg_wnt_signalling, pos_wnt_signalling)
#full_list= reactome_wnt_signalling
reactome_wnt_signalling
reactome_wnt_signalling= read.csv("~/csv/reactome_signalling_by_wnt.csv")
non_canonicial <- read.delim("~/csv/Non-canonical_Wnt.tsv")
View(non_canonicial)
View(non_canonicial)
View(reactome_wnt_signalling)
wnt_signalling <- read.delim("~/csv/Wnt_signalling.tsv")
View(wnt_signalling)
wnt_signalling <- read.delim("~/csv/Wnt_signalling.tsv")
View(wnt_signalling)
pos_wnt_signalling <- read.delim("~/csv/Positive_wnt_signalling.tsv")
View(wnt_signalling)
View(pos_wnt_signalling)
View(reactome_wnt_signalling)
View(wnt_signalling)
wnt_list
wnt_list == "NOTUM"
any(wnt_list == "NOTUM")
neg_wnt_signalling <- read.delim("~/csv/Negative_wnt_signalling.tsv") #manual assignment]
View(neg_wnt_signalling)
View(a)
wnt_list= read.table("~/csv/wnt-gene-list-275.txt", quote="\"", comment.char="")
View(wnt_list)
View(reactome_wnt_signalling)
View(neg_wnt_signalling)
full_list_frame= data.frame(gene= unique(full_list), regulator= T)
full_list_frame$regulator[(full_list_frame$gene %in% reactome_wnt_signalling | full_list_frame$gene %in% neg_wnt_signalling | full_list_frame$gene %in% pos_wnt_signalling | full_list_frame$gene %in% wnt_signalling)]= T
full_list_frame$regulator[(full_list_frame$gene %in% reactome_wnt_signalling |
full_list_frame$gene %in% neg_wnt_signalling |
full_list_frame$gene %in% pos_wnt_signalling |
full_list_frame$gene %in% wnt_signalling)]= T
full_list_frame$target= full_list_frame$gene %in% wnt_list
View(full_list_frame)
unique(master_frame$study)
a= get_gene_minimum_rank("GSE17385 B-catenin shRNA")
View(a)
a= get_gene_minimum_rank("GSE113970 Wnt5a siRNA")
unique(master_frame$study)
a= get_gene_minimum_rank("GSE39902 siRNA B-catenin")
View(a)
library(shiny)
library(shiny)
require(openxlsx)
require(ggplot2)
require(DT)
require(plotly)
#60 MB limit
a= read.csv("~/../Downloads/master_quant_file 2.csv")
View(a)
shiny::runApp()
colnames(a)
b= a[,-c(1:2)]
brandontheme=theme(
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color="black", size=14,
face="plain",hjust = 0.5),
axis.text = element_text(color="black", size=12,
face="plain",hjust = 0.5),
axis.title = element_text(color="black", size=12, face="plain",
hjust = 0.5))
stack(b)
b= a[a$hgnc_symbol == "TNFRSF9",-c(1:2)]
View(b)
a[a$hgnc_symbol == "TNFRSF9",]
which(a$hgnc_symbol == "TNFRSF9")
a[which(a$hgnc_symbol == "TNFRSF9"),]
b= a[which(a$hgnc_symbol == "TNFRSF9"),]
b= a[which(a$hgnc_symbol == "TNFRSF9"),-c(1,2)]
colnames(b)
b= a[which(a$hgnc_symbol == "TNFRSF9"),-c(1,2)]
b= stack(b, select=-hgnc_symbol)
View(b)
View(a)
b= a[which(a$hgnc_symbol == "TNFRSF9"),-c(1,2)]
b= a[which(a$hgnc_symbol == "TNFRSF9"),-c(1)]
bb
b
b$ensembl_transcript_id
b= a[which(a$hgnc_symbol == "TNFRSF9"),]
b= a[which(a$hgnc_symbol == "TNFRSF9"),]
transcript_ids= b$ensembl_transcript_id_isoform
b= b[,-c(1,2)]
b= stack(b, select=-hgnc_symbol)
b= a[which(a$hgnc_symbol == "TNFRSF9"),]
transcript_ids= b$ensembl_transcript_id_isoform
b= b[,-c(1,2)]
b= stack(b, select=-hgnc_symbol)
b$transcripts= rep(transcript_ids, nrow(a)-3)
b= a[which(a$hgnc_symbol == "TNFRSF9"),]
transcript_ids= b$ensembl_transcript_id_isoform
b= b[,-c(1,2)]
b= stack(b, select=-hgnc_symbol)
b$transcripts= rep(transcript_ids, ncol(a)-3)
colnames(b)
ggplot(b, aes(fill=transcript, y=values, x=ind)) +
geom_bar(position="dodge", stat="identity") +
brandontheme
brandontheme=theme(
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color="black", size=14,
face="plain",hjust = 0.5),
axis.text = element_text(color="black", size=12,
face="plain",hjust = 0.5),
axis.title = element_text(color="black", size=12, face="plain",
hjust = 0.5))
ggplot(b, aes(fill=transcripts, y=values, x=ind)) +
geom_bar(position="dodge", stat="identity") +
brandontheme
ggplot(b, aes(fill=transcripts, y=values, x=ind)) +
geom_bar(position="dodge", stat="identity") +
brandontheme +
theme(axis.text.x = element_text(angle = 90, hjust = 0.5, vjust = 0.5)
ggplot(b, aes(fill=transcripts, y=values, x=ind)) +
geom_bar(position="dodge", stat="identity") +
brandontheme +
theme(axis.text.x = element_text(angle = 90, hjust = 0.5, vjust = 0.5)
)
source("~/.active-rstudio-document", echo=TRUE)
a= read.csv("~/../Downloads/master_quant_file 2.csv")
b= a[which(a$hgnc_symbol == "TNFRSF9"),]
transcript_ids= b$ensembl_transcript_id_isoform
b= b[,-c(1,2)]
b= stack(b, select=-hgnc_symbol)
b$transcripts= rep(transcript_ids, ncol(a)-3)
brandontheme=theme(
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color="black", size=14,
face="plain",hjust = 0.5),
axis.text = element_text(color="black", size=12,
face="plain",hjust = 0.5),
axis.title = element_text(color="black", size=12, face="plain",
hjust = 0.5))
a= read.csv("~/../Downloads/master_quant_file 2.csv")
b= a[which(a$hgnc_symbol == "TNFRSF9"),]
transcript_ids= b$ensembl_transcript_id_isoform
b= b[,-c(1,2)]
b= stack(b, select=-hgnc_symbol)
b$transcripts= rep(transcript_ids, ncol(a)-3)
require(ggplot)
brandontheme=theme(
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color="black", size=14,
face="plain",hjust = 0.5),
axis.text = element_text(color="black", size=12,
face="plain",hjust = 0.5),
axis.title = element_text(color="black", size=12, face="plain",
hjust = 0.5))
require(ggplot2)
brandontheme=theme(
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color="black", size=14,
face="plain",hjust = 0.5),
axis.text = element_text(color="black", size=12,
face="plain",hjust = 0.5),
axis.title = element_text(color="black", size=12, face="plain",
hjust = 0.5))
ggplot(b, aes(fill=transcripts, y=values, x=ind)) +
geom_bar(position="dodge", stat="identity") +
brandontheme +
theme(axis.text.x = element_text(angle = 90, hjust = 0.5, vjust = 0.5))
shiny::runApp()
a=mtcars
a[a$mpg<0]
a[a$mpg<0,]
nrow(a[a$mpg<0,])
runApp('app_and_gpl570.R')
runApp('app_and_gpl570.R')
runApp('app_and_gpl570.R')
runApp('app_and_gpl570.R')
################################################################################
#Package install
################################################################################
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
if (!requireNamespace("GEOquery", quietly = TRUE))
BiocManager::install("GEOquery")
require(GEOquery)
if (!requireNamespace("limma", quietly = TRUE))
BiocManager::install("limma")
require(limma)
if("RSQLite" %in% rownames(installed.packages()) == FALSE){
install.packages("RSQLite")}
library(RSQLite)
if("gprofiler2" %in% rownames(installed.packages()) == FALSE){
install.packages("gprofiler2")}
#if("desiR" %in% rownames(installed.packages()) == FALSE){
#  install.packages("desiR")}
#require("desiR")
if("ggplot2" %in% rownames(installed.packages()) == FALSE){
install.packages("ggplot2")}
if("ggrepel" %in% rownames(installed.packages()) == FALSE){
install.packages("ggrepel")}
if("scales" %in% rownames(installed.packages()) == FALSE){
install.packages("scales")}
require(DESeq)
################################################################################
#Data load
################################################################################
load('~/csv/percentile_matrix.RDS')
# load counts table from GEO
urld <- "https://www.ncbi.nlm.nih.gov/geo/download/?format=file&type=rnaseq_counts"
path <- paste(urld, "acc=GSE135306", "file=GSE135306_raw_counts_GRCh38.p13_NCBI.tsv.gz", sep="&");
tbl <- as.matrix(data.table::fread(path, header=T, colClasses="integer"), rownames="GeneID")
# load gene annotations
apath <- paste(urld, "type=rnaseq_counts", "file=Human.GRCh38.p13.annot.tsv.gz", sep="&")
annot <- data.table::fread(apath, header=T, quote="", stringsAsFactors=F, data.table=F)
rownames(annot) <- annot$GeneID
# sample selection
gsms <- "00X11"
sml <- strsplit(gsms, split="")[[1]]
# filter out excluded samples (marked as "X")
sel <- which(sml != "X")
sml <- sml[sel]
tbl <- tbl[ ,sel]
# group membership for samples
gs <- factor(sml)
groups <- make.names(c("CTRL","Treated"))
levels(gs) <- groups
sample_info <- data.frame(Group = gs, row.names = colnames(tbl))
# pre-filter low count genes
# keep genes with at least N counts > 10, where N = size of smallest group
keep <- rowSums( tbl >= 10 ) >= min(table(gs))
tbl <- tbl[keep, ]
ds <- DESeqDataSetFromMatrix(countData=tbl, colData=sample_info, design= ~Group)
# load counts table from GEO
urld <- "https://www.ncbi.nlm.nih.gov/geo/download/?format=file&type=rnaseq_counts"
path <- paste(urld, "acc=GSE135306", "file=GSE135306_raw_counts_GRCh38.p13_NCBI.tsv.gz", sep="&");
tbl <- as.matrix(data.table::fread(path, header=T, colClasses="integer"), rownames="GeneID")
# load gene annotations
apath <- paste(urld, "type=rnaseq_counts", "file=Human.GRCh38.p13.annot.tsv.gz", sep="&")
annot <- data.table::fread(apath, header=T, quote="", stringsAsFactors=F, data.table=F)
rownames(annot) <- annot$GeneID
# sample selection
gsms <- "00X11"
sml <- strsplit(gsms, split="")[[1]]
# filter out excluded samples (marked as "X")
sel <- which(sml != "X")
sml <- sml[sel]
tbl <- tbl[ ,sel]
# group membership for samples
gs <- factor(sml)
groups <- make.names(c("CTRL","Treated"))
levels(gs) <- groups
sample_info <- data.frame(Group = gs, row.names = colnames(tbl))
# pre-filter low count genes
# keep genes with at least N counts > 10, where N = size of smallest group
keep <- rowSums( tbl >= 10 ) >= min(table(gs))
tbl <- tbl[keep, ]
ds <- DESeqDataSetFromMatrix(countData=tbl, colData=sample_info, design= ~Group)
# load counts table from GEO
library(DESeq2)
urld <- "https://www.ncbi.nlm.nih.gov/geo/download/?format=file&type=rnaseq_counts"
path <- paste(urld, "acc=GSE135306", "file=GSE135306_raw_counts_GRCh38.p13_NCBI.tsv.gz", sep="&");
tbl <- as.matrix(data.table::fread(path, header=T, colClasses="integer"), rownames="GeneID")
# load gene annotations
apath <- paste(urld, "type=rnaseq_counts", "file=Human.GRCh38.p13.annot.tsv.gz", sep="&")
annot <- data.table::fread(apath, header=T, quote="", stringsAsFactors=F, data.table=F)
rownames(annot) <- annot$GeneID
# sample selection
gsms <- "00X11"
sml <- strsplit(gsms, split="")[[1]]
# filter out excluded samples (marked as "X")
sel <- which(sml != "X")
sml <- sml[sel]
tbl <- tbl[ ,sel]
# group membership for samples
gs <- factor(sml)
groups <- make.names(c("CTRL","Treated"))
levels(gs) <- groups
sample_info <- data.frame(Group = gs, row.names = colnames(tbl))
# pre-filter low count genes
# keep genes with at least N counts > 10, where N = size of smallest group
keep <- rowSums( tbl >= 10 ) >= min(table(gs))
tbl <- tbl[keep, ]
ds <- DESeqDataSetFromMatrix(countData=tbl, colData=sample_info, design= ~Group)
ds <- DESeq(ds, test="Wald", sfType="poscount")
# extract results for top genes table
r <- results (ds, contrast=c("Group", groups[1], groups[2]), alpha=0.05, pAdjustMethod ="fdr")
tT <- r[order(r$padj)[1:250],]
tT <- merge(as.data.frame(tT), annot, by=0, sort=F)
tT <- subset(tT, select=c("GeneID","padj","pvalue","lfcSE","stat","log2FoldChange","baseMean","Symbol","Description"))
annot
annot$GeneID
colnames(tbl)
# load counts table from GEO
library(DESeq2)
urld <- "https://www.ncbi.nlm.nih.gov/geo/download/?format=file&type=rnaseq_counts"
path <- paste(urld, "acc=GSE135306", "file=GSE135306_raw_counts_GRCh38.p13_NCBI.tsv.gz", sep="&");
tbl <- as.matrix(data.table::fread(path, header=T, colClasses="integer"), rownames="GeneID")
# load gene annotations
apath <- paste(urld, "type=rnaseq_counts", "file=Human.GRCh38.p13.annot.tsv.gz", sep="&")
annot <- data.table::fread(apath, header=T, quote="", stringsAsFactors=F, data.table=F)
rownames(annot) <- annot$GeneID
# sample selection
gsms <- "00X11"
sml <- strsplit(gsms, split="")[[1]]
# filter out excluded samples (marked as "X")
sel <- which(sml != "X")
sml <- sml[sel]
tbl <- tbl[ ,sel]
# group membership for samples
gs <- factor(sml)
groups <- make.names(c("CTRL","Treated"))
levels(gs) <- groups
sample_info <- data.frame(Group = gs, row.names = colnames(tbl))
# pre-filter low count genes
# keep genes with at least N counts > 10, where N = size of smallest group
keep <- rowSums( tbl >= 10 ) >= min(table(gs))
tbl <- tbl[keep, ]
View(tbl)
# filter out excluded samples (marked as "X")
sel <- which(sml != "X")
sml <- sml[sel]
tbl
tbl <- as.matrix(data.table::fread(path, header=T, colClasses="integer"), rownames="GeneID")
View(tT)
gsms <- "00X11"
sml <- strsplit(gsms, split="")[[1]]
# filter out excluded samples (marked as "X")
sel <- which(sml != "X")
sml <- sml[sel]
tbl <- tbl[ ,sel]
# group membership for samples
gs <- factor(sml)
groups <- make.names(c("CTRL","Treated"))
levels(gs) <- groups
sample_info <- data.frame(Group = gs, row.names = colnames(tbl))
# pre-filter low count genes
# keep genes with at least N counts > 10, where N = size of smallest group
keep <- rowSums( tbl >= 10 ) >= min(table(gs))
tbl <- tbl[keep, ]
ds <- DESeqDataSetFromMatrix(countData=tbl, colData=sample_info, design= ~Group)
ds <- DESeq(ds, test="Wald", sfType="poscount")
# extract results for top genes table
r <- results (ds, contrast=c("Group", groups[1], groups[2]), alpha=0.05, pAdjustMethod ="fdr")
tT <- r[order(r$padj)[1:250],]
tT <- merge(as.data.frame(tT), annot, by=0, sort=F)
tbl <- as.matrix(data.table::fread(path, header=T, colClasses="integer"), rownames="GeneID")
tbl
tbl <- tbl[ ,sel]
tbl
