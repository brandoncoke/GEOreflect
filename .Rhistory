install.packages("diptest")}
if("gprofiler2" %in% rownames(installed.packages()) == FALSE){
install.packages("gprofiler2")}
if("dplyr" %in% rownames(installed.packages()) == FALSE){
install.packages("dplyr")}
if("ggVennDiagram" %in% rownames(installed.packages()) == FALSE){
install.packages("ggVennDiagram")}
if("sf" %in% rownames(installed.packages()) == FALSE){
install.packages("sf")}
if("VennDiagram" %in% rownames(installed.packages()) == FALSE){
install.packages("VennDiagram")}
require(VennDiagram)
################################################################################
#functions
################################################################################
require(ggplot2)
brandontheme=theme(
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
plot.title = element_text(color="black", size=14,
face="plain",hjust = 0.5),
axis.text = element_text(color="black", size=12,
face="plain",hjust = 0.7),
axis.title = element_text(color="black", size=12, face="plain",
hjust = 0.5))
################################################################################
#Dynamic range
################################################################################
GPL10558_min_to_be_sig= read.csv("~/csv/min_to_be_sig_GPL10558.csv")
GPL6480_min_to_be_sig= read.csv("~/csv/min_to_be_sig_GPL6480.csv")
min_to_be_sig= read.csv("~/csv/min_to_be_sig_Gemma_RNAseq.csv")
GPL570_min_to_be_sig= read.csv("~/csv/min_to_be_sig_GPL570.csv")
dynamic_range= data.frame(value= GPL10558_min_to_be_sig$min_to_be_sig,
plat= "GPL10558")
temp= data.frame(value= GPL6480_min_to_be_sig$min_to_be_sig,
plat= "GPL6480")
dynamic_range= rbind(dynamic_range, temp)
temp= data.frame(value= min_to_be_sig$min_to_be_sig,
plat= "RNA-seq")
dynamic_range= rbind(dynamic_range, temp)
temp= data.frame(value= GPL570_min_to_be_sig$min_to_be_sig - min(GPL570_min_to_be_sig$min_to_be_sig),
plat= "GPL570")
dynamic_range= rbind(dynamic_range, temp)
ggplot(dynamic_range, aes(y=value, x= plat)) +
stat_boxplot(geom = "errorbar", color= "black", coef= 1.5) +
geom_boxplot() +
theme(axis.text.x = element_text(face = "plain", size = 12, angle = 60,
hjust = 1, vjust = 1)) +
labs(y="CDF values",x="Platform used to obtain\ngene CDF values",title =
"CDF value distributions across platforms") +
scale_y_continuous(expand = c(0, 0.001),
breaks =  seq(0,
0.9,
0.1)) +
brandontheme
ggsave("~/dynamic_range.png",width=1800,height= 1200,units = "px")
################################################################################
#CDF value distribution
################################################################################
min_to_be_sig= read.csv("~/csv/min_to_be_sig_Gemma_RNAseq.csv")
GPL570_min_to_be_sig= read.csv("~/csv/min_to_be_sig_GPL570.csv")
GPL570_min_to_be_sig$plat= "GPL570"
min_to_be_sig$plat= "RNAseq"
#remove miRNA, lncRNA and rRNAs
GPL570_min_to_be_sig= GPL570_min_to_be_sig[!grepl("^SNORD|^lnc|^miR[0-9]|^MIRLET|SCARNA|^RNA[0-9]",
GPL570_min_to_be_sig$gene,
ignore.case = T), ]
min_to_be_sig= min_to_be_sig[!grepl("^SNORD|^lnc|^miR[0-9]|^MIRLET|SCARNA|^RNA[0-9]",
min_to_be_sig$gene,
ignore.case = T), ]
#lots of duplicate assignments with low priors- skews dist
#remove them using code below
min_to_be_sig= min_to_be_sig[min_to_be_sig$min_to_be_sig >= 0.02224694, ]
pearson_skewness= (3*(mean(min_to_be_sig$min_to_be_sig)-
median(min_to_be_sig$min_to_be_sig)))/sd(
min_to_be_sig$min_to_be_sig)
require(diptest)
dip= dip.test(min_to_be_sig$min_to_be_sig)
dip_pval= dip$p.value
if(dip_pval < 0.0001){
dip_pval= "< 0.0001"
}else{
dip_pval= round(dip_pval, 3)
}
dip_stat= dip$statistic
#GPL570 dips
dip_2= dip.test(GPL570_min_to_be_sig$min_to_be_sig)
dip_pval_2= dip_2$p.value
if(dip_pval_2 < 0.0001){
dip_pval_2= "< 0.0001"
}else{
dip_pval_2= round(dip_pval_2, 3)
}
dip_stat_2= dip_2$statistic
hist_frame= rbind(min_to_be_sig,
GPL570_min_to_be_sig)
ggplot(hist_frame, aes(x=min_to_be_sig, fill=plat, colour=plat)) +
geom_histogram(aes(y=..density..), colour="black", binwidth = 0.005, position = "identity", alpha= c(0.5)) +
geom_density(alpha=0.2, size= 1.25) +
scale_x_continuous(expand = c(0, 0.001),
breaks =  seq(0,0.5, 0.05)) +
scale_y_continuous(expand = c(0, 0), breaks =  seq(0,9,1)) +
labs(y="Density of distribution",x="CDF for gene p-values \n across studies",title =
"Distribution of priors normalised by z-score") +
brandontheme +
scale_fill_manual("Method to\nobtain priors", values=c("#008080", "#ff691f", "#bababa", "009090")) +
scale_color_manual("Method to\nobtain priors", values=c("#008080", "#ff691f", "#bababa", "009090")) +
annotate("text", x= 0.34,
y= 5.5,
label=as.character(paste0("      RNAseq Hartigans' dip test p-value= ",
dip_pval,
"\nRNAseq Hartigans' dip test statstic= ",
round(dip_stat, 3),
"\n      GPL570 Hartigans' dip test p-value= \n",
dip_pval_2,
"\nGPL570 Hartigans' dip test statstic= \n",
round(dip_stat_2, 3)
)
)
)
ggsave("~/RNAseq_and_GPL570_distribution.tiff",width=3750,height= 2000,units = "px")
quantile(min_to_be_sig$min_to_be_sig)
View(GPL6480_min_to_be_sig)
quantile(min_to_be_sig$min_to_be_sig, 0.1)
quantile(GPL570_min_to_be_sig$min_to_be_sig, 0.7)
quantile(GPL570_min_to_be_sig$min_to_be_sig, 0.25)
sd(min_to_be_sig$min_to_be_sig)
sd(GPL570_min_to_be_sig$min_to_be_sig)
dynamic_range
dynamic_range= dynamic_range[dynamic_range$plat %in% c("GPL570", "RNA-seq")]
dynamic_range= dynamic_range[dynamic_range$plat %in% c("GPL570", "RNA-seq"), ]
ggplot(dynamic_range, aes(y=value, x= plat)) +
stat_boxplot(geom = "errorbar", color= "black", coef= 1.5) +
geom_boxplot() +
theme(axis.text.x = element_text(face = "plain", size = 12, angle = 60,
hjust = 1, vjust = 1)) +
labs(y="CDF values",x="Platform used to obtain\ngene CDF values",title =
"CDF value distributions across platforms") +
scale_y_continuous(expand = c(0, 0.001),
breaks =  seq(0,
0.9,
0.1)) +
brandontheme
ggsave("~/dynamic_range.png",width=1800,height= 1200,units = "px")
################################################################################
GPL10558_min_to_be_sig= read.csv("~/csv/min_to_be_sig_GPL10558.csv")
GPL6480_min_to_be_sig= read.csv("~/csv/min_to_be_sig_GPL6480.csv")
min_to_be_sig= read.csv("~/csv/min_to_be_sig_Gemma_RNAseq.csv")
GPL570_min_to_be_sig= read.csv("~/csv/min_to_be_sig_GPL570.csv")
dynamic_range= data.frame(value= GPL10558_min_to_be_sig$min_to_be_sig,
plat= "GPL10558")
temp= data.frame(value= GPL6480_min_to_be_sig$min_to_be_sig,
plat= "GPL6480")
dynamic_range= rbind(dynamic_range, temp)
temp= data.frame(value= min_to_be_sig$min_to_be_sig,
plat= "RNA-seq")
dynamic_range= rbind(dynamic_range, temp)
temp= data.frame(value= GPL570_min_to_be_sig$min_to_be_sig - min(GPL570_min_to_be_sig$min_to_be_sig),
plat= "GPL570")
dynamic_range= rbind(dynamic_range, temp)
ggplot(dynamic_range, aes(y=value, x= plat)) +
stat_boxplot(geom = "errorbar", color= "black", coef= 1.5) +
geom_boxplot() +
theme(axis.text.x = element_text(face = "plain", size = 12, angle = 60,
hjust = 1, vjust = 1)) +
labs(y="CDF values",x="Platform used to obtain\ngene CDF values",title =
"CDF value distributions across platforms") +
scale_y_continuous(expand = c(0, 0.001),
breaks =  seq(0,
0.9,
0.1)) +
brandontheme
ggsave("~/dynamic_range.png",width=1800,height= 1200,units = "px")
dynamic_range= dynamic_range[dynamic_range$plat %in% c("GPL570", "RNA-seq"), ]
ggplot(dynamic_range, aes(y=value, x= plat)) +
stat_boxplot(geom = "errorbar", color= "black", coef= 1.5) +
geom_boxplot() +
theme(axis.text.x = element_text(face = "plain", size = 12, angle = 60,
hjust = 1, vjust = 1)) +
labs(y="CDF values",x="Platform used to obtain\ngene CDF values",title =
"CDF value distributions across platforms") +
scale_y_continuous(expand = c(0, 0.001),
breaks =  seq(0,
0.9,
0.1)) +
brandontheme
ggsave("~/dynamic_range.png",width=1800,height= 1200,units = "px")
ggplot(dynamic_range, aes(y=value, x= plat)) +
stat_boxplot(geom = "errorbar", color= "black", coef= 1.5) +
geom_boxplot() +
theme(axis.text.x = element_text(face = "plain", size = 12, angle = 60,
hjust = 1, vjust = 1)) +
labs(y="CDF values",x="Platform used to obtain\ngene CDF values",title =
"CDF value distributions across platforms") +
scale_y_continuous(expand = c(0, 0.001),
breaks =  seq(0,
0.9,
0.1)) +
brandontheme
ggsave("~/dynamic_range.png",width=1000,height= 1200,units = "px")
quantile(GPL570_min_to_be_sig$min_to_be_sig, 0.75)
quantile(min_to_be_sig$min_to_be_sig, 0.75)
quantile(min_to_be_sig$min_to_be_sig, 0.5)
quantile(GPL570_min_to_be_sig$min_to_be_sig, 0.5)
IQR(min_to_be_sig$min_to_be_sig)
IQR(GPL570_min_to_be_sig$min_to_be_sig)
quantile(GPL570_min_to_be_sig$min_to_be_sig, 0.5)
quantile(GPL570_min_to_be_sig$min_to_be_sig)
IQR(min_to_be_sig$min_to_be_sig)
quantile(min_to_be_sig$min_to_be_sig)
################################################################################
sqlite_location= "I:/other_plat_v9.sqlite3"
require(RSQLite)
mydb= dbConnect(SQLite(),sqlite_location)
dbListTables(mydb)
metadata_table= paste0("SELECT * FROM other_plat_data_meta")
metadata_table= dbGetQuery(mydb, metadata_table)
studies_included= paste0("SELECT block_name_id FROM other_plat_data_meta WHERE gpl IS \'Gemma_RNAseq\'")
studies_included= dbGetQuery(mydb, studies_included)
metadata_table$tissue[metadata_table$tissue == "neuronal"]= "neural"
#plat_frame= paste0("SELECT distinct(block_name_id), gpl FROM other_plat_data group by block_name_id")
#plat_frame= dbGetQuery(mydb, plat_frame)
#RNAseq_datasets= plat_frame$block_name_id[plat_frame$gpl ==
#                                            "Gemma_RNAseq"]
metadata_table= metadata_table[metadata_table$gpl == "Gemma_RNAseq", ]
studies= lapply(metadata_table$block_name_id,
function(x){
unlist(strsplit(x, "_"))[1]
})
metadata_table
require(plotly)
metadata_table_counts=
as.data.frame(sort(table(metadata_table$tissue),decreasing = T))
metadata_table_counts$Percentage= (metadata_table_counts$Freq/
sum(metadata_table_counts$Freq))*100
colnames(metadata_table_counts)[1]= "Tissue type"
#df$csum <- ave(metadata_table_counts$Freq,
#               metadata_table_counts$Percentage,
#               FUN=cumsum)
tissues_below_thres= table(metadata_table$tissue)
tissues_below_thres= names(tissues_below_thres)[tissues_below_thres <
sum(tissues_below_thres) * 0.01]
upper_case_first= function(a_string= "blood"){
a_string= as.character(a_string)
paste0(toupper(substr(a_string, 1, 1)),
substr(a_string, 2, nchar(a_string))
)
}
metadata_table_counts$`Tissue type`[metadata_table_counts$`Tissue type` %in%
tissues_below_thres]= "Other"
metadata_table_counts$`Tissue type`= as.character(lapply(
metadata_table_counts$`Tissue type`, upper_case_first
))
fig <- plot_ly(metadata_table_counts, labels = ~`Tissue type`, values = ~Percentage, type = 'pie')
pie <- fig %>% layout(title = "Breakdown by tissue type",
xaxis = list(showgrid = FALSE, zeroline = FALSE,
showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE,
showticklabels = FALSE))
pie
study_type_table= table
fig <- plot_ly(metadata_table_counts, labels = ~`Tissue type`, values = ~Percentage, type = 'pie')
pie <- fig %>% layout(title = "Breakdown by tissue type",
xaxis = list(showgrid = FALSE, zeroline = FALSE,
showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE,
showticklabels = FALSE))
pie
metadata_table_counts
sqlite_location= "I:/other_plat_v9.sqlite3"
require(RSQLite)
mydb= dbConnect(SQLite(),sqlite_location)
dbListTables(mydb)
metadata_table= paste0("SELECT * FROM other_plat_data_meta")
metadata_table= dbGetQuery(mydb, metadata_table)
studies_included= paste0("SELECT DISTINCT block_name_id FROM other_plat_data WHERE gpl IS \'Gemma_RNAseq\'")
studies_included= dbGetQuery(mydb, studies_included)
metadata_table= metadata_table[metadata_table$block_name_id %in%
studies_included$block_name_id, ]
metadata_table$tissue[metadata_table$tissue == "neuronal"]= "neural"
#plat_frame= paste0("SELECT distinct(block_name_id), gpl FROM other_plat_data group by block_name_id")
#plat_frame= dbGetQuery(mydb, plat_frame)
#RNAseq_datasets= plat_frame$block_name_id[plat_frame$gpl ==
#                                            "Gemma_RNAseq"]
metadata_table= metadata_table[metadata_table$gpl == "Gemma_RNAseq", ]
studies= lapply(metadata_table$block_name_id,
function(x){
unlist(strsplit(x, "_"))[1]
})
metadata_table
require(plotly)
metadata_table_counts=
as.data.frame(sort(table(metadata_table$tissue),decreasing = T))
metadata_table_counts$Percentage= (metadata_table_counts$Freq/
sum(metadata_table_counts$Freq))*100
colnames(metadata_table_counts)[1]= "Tissue type"
#df$csum <- ave(metadata_table_counts$Freq,
#               metadata_table_counts$Percentage,
#               FUN=cumsum)
tissues_below_thres= table(metadata_table$tissue)
tissues_below_thres= names(tissues_below_thres)[tissues_below_thres <
sum(tissues_below_thres) * 0.01]
upper_case_first= function(a_string= "blood"){
a_string= as.character(a_string)
paste0(toupper(substr(a_string, 1, 1)),
substr(a_string, 2, nchar(a_string))
)
}
metadata_table_counts$`Tissue type`[metadata_table_counts$`Tissue type` %in%
tissues_below_thres]= "Other"
metadata_table_counts$`Tissue type`= as.character(lapply(
metadata_table_counts$`Tissue type`, upper_case_first
))
fig <- plot_ly(metadata_table_counts, labels = ~`Tissue type`, values = ~Percentage, type = 'pie')
pie <- fig %>% layout(title = "Breakdown by tissue type",
xaxis = list(showgrid = FALSE, zeroline = FALSE,
showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE,
showticklabels = FALSE))
pie
study_type_table= table
fig <- plot_ly(metadata_table_counts, labels = ~`Tissue type`, values = ~Percentage, type = 'pie')
pie <- fig %>% layout(title = "Breakdown by tissue type",
xaxis = list(showgrid = FALSE, zeroline = FALSE,
showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE,
showticklabels = FALSE))
pie
pi
pie
fig %>% layout(title = "Breakdown by tissue type",
xaxis = list(showgrid = FALSE, zeroline = FALSE,
showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE,
showticklabels = FALSE))
plot_ly(metadata_table_counts, labels = ~`Tissue type`, values = ~Percentage, type = 'pie')
require(plotly)
fig <- plot_ly(metadata_table_counts, labels = ~`Tissue type`, values = ~Percentage, type = 'pie')
pie <- fig %>% layout(title = "Breakdown by tissue type",
xaxis = list(showgrid = FALSE, zeroline = FALSE,
showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE,
showticklabels = FALSE))
pie
metadata_table_counts
fig <- plot_ly(metadata_table_counts, labels = ~`Tissue type`, values = ~Percentage, type = 'pie')
pie <- fig %>% layout(title = "Breakdown by tissue type",
xaxis = list(showgrid = FALSE, zeroline = FALSE,
showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE,
showticklabels = FALSE))
pie
sqlite_location= "I:/other_plat_v9.sqlite3"
require(RSQLite)
mydb= dbConnect(SQLite(),sqlite_location)
dbListTables(mydb)
metadata_table= paste0("SELECT * FROM other_plat_data_meta")
metadata_table= dbGetQuery(mydb, metadata_table)
studies_included= paste0("SELECT DISTINCT block_name_id FROM other_plat_data WHERE gpl IS \'Gemma_RNAseq\'")
studies_included= dbGetQuery(mydb, studies_included)
metadata_table= metadata_table[metadata_table$block_name_id %in%
studies_included$block_name_id, ]
metadata_table$tissue[metadata_table$tissue == "neuronal"]= "neural"
#plat_frame= paste0("SELECT distinct(block_name_id), gpl FROM other_plat_data group by block_name_id")
#plat_frame= dbGetQuery(mydb, plat_frame)
#RNAseq_datasets= plat_frame$block_name_id[plat_frame$gpl ==
#                                            "Gemma_RNAseq"]
metadata_table= metadata_table[metadata_table$gpl == "Gemma_RNAseq", ]
studies= lapply(metadata_table$block_name_id,
function(x){
unlist(strsplit(x, "_"))[1]
})
metadata_table
require(plotly)
metadata_table_counts=
as.data.frame(sort(table(metadata_table$tissue),decreasing = T))
metadata_table_counts$Percentage= (metadata_table_counts$Freq/
sum(metadata_table_counts$Freq))*100
colnames(metadata_table_counts)[1]= "Tissue type"
#df$csum <- ave(metadata_table_counts$Freq,
#               metadata_table_counts$Percentage,
#               FUN=cumsum)
tissues_below_thres= table(metadata_table$tissue)
tissues_below_thres= names(tissues_below_thres)[tissues_below_thres <
sum(tissues_below_thres) * 0.01]
upper_case_first= function(a_string= "blood"){
a_string= as.character(a_string)
paste0(toupper(substr(a_string, 1, 1)),
substr(a_string, 2, nchar(a_string))
)
}
metadata_table_counts$`Tissue type`[metadata_table_counts$`Tissue type` %in%
tissues_below_thres]= "Other"
metadata_table_counts$`Tissue type`= as.character(lapply(
metadata_table_counts$`Tissue type`, upper_case_first
))
fig <- plot_ly(metadata_table_counts, labels = ~`Tissue type`,
values = ~Percentage, type = 'pie')
pie <- fig %>% layout(title = "Breakdown by tissue type",
xaxis = list(showgrid = FALSE, zeroline = FALSE,
showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE,
showticklabels = FALSE))
pie
################################################################################
#piechart for GPL570
################################################################################
sqlite_location= "I:/gpl570_v6.sqlite3"
require(RSQLite)
mydb= dbConnect(SQLite(),sqlite_location)
dbListTables(mydb)
metadata_table= paste0("SELECT * FROM GPL570_metadata")
metadata_table= dbGetQuery(mydb, metadata_table)
#plat_frame= paste0("SELECT distinct(block_name_id), gpl FROM other_plat_data group by block_name_id")
#plat_frame= dbGetQuery(mydb, plat_frame)
#RNAseq_datasets= plat_frame$block_name_id[plat_frame$gpl ==
#                                            "Gemma_RNAseq"]
studies= lapply(metadata_table$block_name_id,
function(x){
unlist(strsplit(x, "_"))[1]
})
metadata_table
require(plotly)
metadata_table_counts=
as.data.frame(sort(table(metadata_table$tissue),decreasing = T))
metadata_table_counts$Percentage= (metadata_table_counts$Freq/
sum(metadata_table_counts$Freq))*100
colnames(metadata_table_counts)[1]= "Tissue type"
#df$csum <- ave(metadata_table_counts$Freq,
#               metadata_table_counts$Percentage,
#               FUN=cumsum)
tissues_below_thres= table(metadata_table$tissue)
tissues_below_thres= names(tissues_below_thres)[tissues_below_thres <
sum(tissues_below_thres) * 0.035]
upper_case_first= function(a_string= "blood"){
a_string= as.character(a_string)
paste0(toupper(substr(a_string, 1, 1)),
substr(a_string, 2, nchar(a_string))
)
}
metadata_table_counts$`Tissue type`[metadata_table_counts$`Tissue type` %in%
tissues_below_thres]= "Other"
metadata_table_counts$`Tissue type`= as.character(lapply(
metadata_table_counts$`Tissue type`, upper_case_first
))
fig <- plot_ly(metadata_table_counts, labels = ~`Tissue type`, values = ~Percentage, type = 'pie')
pie <- fig %>% layout(title = "Breakdown by tissue type",
xaxis = list(showgrid = FALSE, zeroline = FALSE,
showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE,
showticklabels = FALSE))
pie
x11() ggplotly(g)
x11()
################################################################################
#piechart for GPL570
################################################################################
sqlite_location= "I:/gpl570_v6.sqlite3"
require(RSQLite)
mydb= dbConnect(SQLite(),sqlite_location)
dbListTables(mydb)
metadata_table= paste0("SELECT * FROM GPL570_metadata")
metadata_table= dbGetQuery(mydb, metadata_table)
#plat_frame= paste0("SELECT distinct(block_name_id), gpl FROM other_plat_data group by block_name_id")
#plat_frame= dbGetQuery(mydb, plat_frame)
#RNAseq_datasets= plat_frame$block_name_id[plat_frame$gpl ==
#                                            "Gemma_RNAseq"]
studies= lapply(metadata_table$block_name_id,
function(x){
unlist(strsplit(x, "_"))[1]
})
metadata_table
require(plotly)
metadata_table_counts=
as.data.frame(sort(table(metadata_table$tissue),decreasing = T))
metadata_table_counts$Percentage= (metadata_table_counts$Freq/
sum(metadata_table_counts$Freq))*100
colnames(metadata_table_counts)[1]= "Tissue type"
#df$csum <- ave(metadata_table_counts$Freq,
#               metadata_table_counts$Percentage,
#               FUN=cumsum)
tissues_below_thres= table(metadata_table$tissue)
tissues_below_thres= names(tissues_below_thres)[tissues_below_thres <
sum(tissues_below_thres) * 0.035]
upper_case_first= function(a_string= "blood"){
a_string= as.character(a_string)
paste0(toupper(substr(a_string, 1, 1)),
substr(a_string, 2, nchar(a_string))
)
}
metadata_table_counts$`Tissue type`[metadata_table_counts$`Tissue type` %in%
tissues_below_thres]= "Other"
metadata_table_counts$`Tissue type`= as.character(lapply(
metadata_table_counts$`Tissue type`, upper_case_first
))
fig <- plot_ly(metadata_table_counts, labels = ~`Tissue type`, values = ~Percentage, type = 'pie')
pie <- fig %>% layout(title = "Breakdown by tissue type",
xaxis = list(showgrid = FALSE, zeroline = FALSE,
showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE,
showticklabels = FALSE))
pie
fig <- plot_ly(metadata_table_counts, labels = ~`Tissue type`, values = ~Percentage, type = 'pie')
pie <- fig %>% layout(title = "Breakdown by tissue type",
xaxis = list(showgrid = FALSE, zeroline = FALSE,
showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE,
showticklabels = FALSE))
pie
x11() pue
x11() pie
x11(pie)
